module interpolation;

enum InterpolationMethod {
	cubic,
	none,
	linear,
}

byte interpolate(InterpolationMethod method, scope const byte[] samples, int position) @safe pure nothrow {
	final switch(method) {
		case InterpolationMethod.none:
			return samples[0];
		case InterpolationMethod.linear:
			return linearInterpolation(samples[0 .. 2], position >> 8);
		case InterpolationMethod.cubic:
			return cubicInterpolation(samples[0 .. 4], cast(ubyte)(position >> 8));
	}
}

byte linearInterpolation(byte[2] samples, int position) @safe pure nothrow {
	return cast(byte)((samples[0]* (0x100 - position) + samples[1] * position) >> 8);
}

byte cubicInterpolation(byte[4] latest, ubyte index) nothrow @safe pure {
	const(short)[] fwd = cubicTable[index .. index + 258];
	const(short)[] rev = cubicTable[256 - index  .. 514 - index]; // mirror left half

	int result;
	result = (fwd[0] * latest[0]);
	result += (fwd[257] * latest[1]);
	result += (rev[257] * latest[2]);
	result += (rev[0] * latest[3]);
	result >>= 8;

	if (cast(byte)result != result) {
		result = (result >> 31) ^ 0x7F;
	}
	return cast(byte)result;
}

immutable short[514] cubicTable = [
0, -1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -6, -7, -7, -7,
-8, -8, -9, -9, -9, -10, -10, -10, -11, -11, -11, -12, -12, -12, -12, -13, -13,
-13, -13, -14, -14, -14, -14, -15, -15, -15, -15, -16, -16, -16, -16, -16, -16, -17,
-17, -17, -17, -17, -17, -17, -18, -18, -18, -18, -18, -18, -18, -18, -18, -19, -19,
-19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
-19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
-19, -19, -19, -19, -19, -19, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
-17, -17, -17, -17, -17, -17, -17, -17, -17, -16, -16, -16, -16, -16, -16, -16, -16,
-15, -15, -15, -15, -15, -15, -14, -14, -14, -14, -14, -14, -14, -13, -13, -13, -13,
-13, -13, -13, -12, -12, -12, -12, -12, -11, -11, -11, -11, -11, -11, -11, -10, -10,
-10, -10, -10, -10, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -7,
-7, -7, -7, -7, -7, -6, -6, -6, -6, -6, -6, -5, -5, -5, -5, -5, -5,
-5, -4, -4, -4, -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, 0, 0, 0, 0,
0,
256, 256, 256, 256, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 253, 253,
253, 253, 252, 252, 251, 251, 251, 250, 250, 249, 249, 248, 248, 247, 247, 246, 246,
245, 245, 244, 243, 243, 242, 241, 241, 240, 239, 239, 238, 237, 236, 236, 235, 234,
233, 232, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 222, 221, 220, 219,
218, 217, 216, 215, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 202, 201, 200,
199, 198, 197, 195, 194, 193, 192, 191, 190, 188, 187, 186, 185, 183, 182, 181, 180,
178, 177, 176, 174, 173, 172, 170, 169, 168, 167, 165, 164, 163, 161, 160, 159, 157,
156, 154, 153, 152, 150, 149, 148, 146, 145, 144, 142, 141, 139, 138, 137, 135, 134,
132, 131, 130, 128, 127, 126, 124, 123, 121, 120, 119, 117, 116, 114, 113, 112, 110,
109, 108, 106, 105, 103, 102, 101, 99, 98, 97, 95, 94, 93, 91, 90, 88, 87,
86, 84, 83, 82, 80, 79, 78, 77, 75, 74, 73, 71, 70, 69, 67, 66, 65,
64, 62, 61, 60, 59, 58, 56, 55, 54, 53, 52, 50, 49, 48, 47, 46, 45,
43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27,
26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 17, 16, 15, 14, 13, 12, 12,
11, 10, 9, 9, 8, 7, 7, 6, 5, 5, 4, 3, 3, 2, 2, 1, 1, 0,
0,
];